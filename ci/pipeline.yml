---
jobs:
- name: unit
  serial: true
  plan:
  - get: bosh-s3cli
    trigger: true
  - get: s3cli-docker-image
    trigger: true
  - task: test
    file: bosh-s3cli/ci/tasks/run-unit.yml

- name: aws-s3-us-integration
  serial: true
  plan:
  - get: bosh-s3cli
    passed: [ unit ]
    trigger: true
  - get: s3cli-docker-image
    trigger: true
    passed:
    - unit
  - task: setup
    file: bosh-s3cli/ci/tasks/setup-aws-infrastructure.yml
    params: &aws-us-infrastructure-params
      access_key_id: ((bosh_s3cli_pipeline.username))
      secret_access_key: ((bosh_s3cli_pipeline.password))
      region_name: us-east-1
      stack_name: s3cli-iam

  - in_parallel:
    - task: test-static-credentials
      image: s3cli-docker-image
      file: bosh-s3cli/ci/tasks/run-integration-aws.yml
      params:
        <<: *aws-us-infrastructure-params
        focus_regex: "GENERAL AWS|AWS V2 REGION|AWS V4 REGION|AWS US-EAST-1"
        s3_endpoint_host: s3.amazonaws.com
    - task: test-assume-roles
      image: s3cli-docker-image
      file: bosh-s3cli/ci/tasks/run-integration-aws-assume.yml
      params:
        access_key_id: ((bosh_s3cli_pipeline.username))
        secret_access_key: ((bosh_s3cli_pipeline.password))
        assume_role_arn: ((assume_role_test_arn))
        focus_regex: "AWS ASSUME ROLE"
        s3_endpoint_host: s3.amazonaws.com
    - task: test-env-or-profile
      image: s3cli-docker-image
      file: bosh-s3cli/ci/tasks/run-integration-aws-iam.yml
      params:
        <<: *aws-us-infrastructure-params
        s3_endpoint_host: s3.amazonaws.com
    ensure:
      task: teardown
      file: bosh-s3cli/ci/tasks/teardown-infrastructure.yml
      params: *aws-us-infrastructure-params

- name: aws-s3-public-read-integration
  serial: true
  plan:
  - get: bosh-s3cli
    passed: [ unit ]
    trigger: true
  - get: s3cli-docker-image
    trigger: true
    passed:
    - unit
  - task: setup
    file: bosh-s3cli/ci/tasks/setup-aws-infrastructure.yml
    params: &aws-us-public-read-infrastructure-params
      access_key_id: ((bosh_s3cli_pipeline.username))
      secret_access_key: ((bosh_s3cli_pipeline.password))
      region_name: us-east-1
      stack_name: s3cli-public-bucket

  - task: test
    image: s3cli-docker-image
    file: bosh-s3cli/ci/tasks/run-integration-aws.yml
    params:
      <<: *aws-us-public-read-infrastructure-params
      focus_regex: "PUBLIC READ ONLY"
    ensure:
      task: teardown
      file: bosh-s3cli/ci/tasks/teardown-infrastructure.yml
      params: *aws-us-public-read-infrastructure-params

- name: aws-s3-frankfurt-integration
  serial: true
  plan:
  - get: bosh-s3cli
    passed: [ unit ]
    trigger: true
  - get: s3cli-docker-image
    trigger: true
    passed:
    - unit
  - task: setup
    file: bosh-s3cli/ci/tasks/setup-aws-infrastructure.yml
    params: &aws-frankfurt-infrastructure-params
      access_key_id: ((bosh_s3cli_pipeline.username))
      secret_access_key: ((bosh_s3cli_pipeline.password))
      region_name: eu-central-1
      stack_name: s3cli-private-bucket

  - task: test
    file: bosh-s3cli/ci/tasks/run-integration-aws.yml
    image: s3cli-docker-image
    params:
      <<: *aws-frankfurt-infrastructure-params
      focus_regex: "GENERAL AWS|AWS V4 REGION|AWS V4 ONLY REGION"
      s3_endpoint_host: s3.eu-central-1.amazonaws.com
    ensure:
      task: teardown
      file: bosh-s3cli/ci/tasks/teardown-infrastructure.yml
      params: *aws-frankfurt-infrastructure-params

- name: gcs-s3-compatible-integration
  serial: true
  plan:
  - get: bosh-s3cli
    passed: [ unit ]
    trigger: true
  - get: s3cli-docker-image
    trigger: true
    passed:
    - unit
  - task: test
    image: s3cli-docker-image
    file: bosh-s3cli/ci/tasks/run-integration-s3-compat.yml
    params:
      access_key_id: ((bosh_s3cli_pipeline_gcp.username))
      secret_access_key: ((bosh_s3cli_pipeline_gcp.password))
      bucket_name: bosh-s3cli-pipeline
      s3_endpoint_host: storage.googleapis.com
      s3_endpoint_port: 443

- name: publish-and-tag
  plan:
  - in_parallel:
    - get: bosh-s3cli
      trigger: true
      passed:
      - aws-s3-us-integration
      - aws-s3-frankfurt-integration
      - aws-s3-public-read-integration
      - gcs-s3-compatible-integration
    - get: s3cli-docker-image
      trigger: true
      passed:
      - aws-s3-us-integration
      - aws-s3-frankfurt-integration
      - aws-s3-public-read-integration
      - gcs-s3-compatible-integration
    - put: version-semver
      params:
        bump: patch
  - in_parallel:
    - task: build-linux
      image: s3cli-docker-image
      file: bosh-s3cli/ci/tasks/build.yml
      output_mapping: { out: out-linux }
      params:
        GOOS: linux
    - task: build-windows
      image: s3cli-docker-image
      file: bosh-s3cli/ci/tasks/build.yml
      output_mapping: { out: out-windows }
      params:
        GOOS: windows
  - in_parallel:
    - put: release-bucket-linux
      params: { file: out-linux/s3cli-*-linux-amd64 }
    - put: release-bucket-windows
      params: { file: out-windows/s3cli-*-windows-amd64.exe }
  - put: bosh-s3cli
    params:
      repository: bosh-s3cli
      rebase: true
      tag: version-semver/number
      tag_prefix: v

- name: build-s3cli-docker-image
  plan:
  - get: bosh-s3cli
    resource: bosh-s3cli-for-docker-image-creation
    trigger: true
  - get: bosh-golang-release-image
    trigger: true
  - put: s3cli-docker-image
    params:
      build: "bosh-s3cli/ci/docker/boshcpi.s3cli"
    get_params:
      skip_download: true

- name: bump-deps
  plan:
  - in_parallel:
    - get: bosh-s3cli
    - get: golang-release
    - get: weekly
      trigger: true
  - task: bump-deps
    file: golang-release/ci/tasks/shared/bump-deps.yml
    input_mapping:
      input_repo: bosh-s3cli
    output_mapping:
      output_repo: bumped-bosh-s3cli
  - task: test
    file: bosh-s3cli/ci/tasks/run-unit.yml
    input_mapping:
      bosh-s3cli: bumped-bosh-s3cli
  - put: bosh-s3cli
    params:
      repository: bumped-bosh-s3cli
      rebase: true

resources:
- name: bosh-s3cli
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-s3cli.git
    branch: main
    private_key: ((github_deploy_key_bosh-s3cli.private_key))

- name: bosh-s3cli-for-docker-image-creation
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-s3cli.git
    branch: main
    private_key: ((github_deploy_key_bosh-s3cli.private_key))
    paths: ["ci/docker/*"]

- name: golang-release
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-package-golang-release.git

- name: version-semver
  type: semver
  source:
    initial_version: 0.0.1
    key: current-version
    bucket: bosh-s3cli-artifacts
    access_key_id: ((bosh_s3cli_pipeline.username))
    secret_access_key: ((bosh_s3cli_pipeline.password))

- name: release-bucket-linux
  type: s3
  source:
    regexp: s3cli-(.*)-linux-amd64
    bucket: bosh-s3cli-artifacts
    access_key_id: ((bosh_s3cli_pipeline.username))
    secret_access_key: ((bosh_s3cli_pipeline.password))

- name: release-bucket-windows
  type: s3
  source:
    regexp: s3cli-(.*)-windows-amd64\.exe
    bucket: bosh-s3cli-artifacts
    access_key_id: ((bosh_s3cli_pipeline.username))
    secret_access_key: ((bosh_s3cli_pipeline.password))

- name: bosh-golang-release-image
  type: docker-image
  source:
    repository: ghcr.io/cloudfoundry/bosh/golang-release
    username: ((github_read_write_packages.username))
    password: ((github_read_write_packages.password))

- name: s3cli-docker-image
  type: docker-image
  source:
    repository: ghcr.io/cloudfoundry/bosh/s3cli
    username: ((github_read_write_packages.username))
    password: ((github_read_write_packages.password))

- name: weekly
  type: time
  source:
    start: 3:00 -0700
    stop: 4:30 -0700
    days: [ Saturday ]
